name: E2E Test

# This builds all binary versions and runs the end-to-end test against test Dynatrace environments
# This currently only runs on push to main and nightly

on:
  push:
    branches: [ main ]
  schedule:
  # nightly build ensure E2E tests run daily and catch any breaking API changes
  - cron: '0 0 * * *'
  pull_request_target:
    types: [ labeled ]

defaults:
  run:
    shell: bash

env:
  E2E_TEST_LABEL: 'run-e2e-test'

jobs:

  release-binaries:
    name: Build release binaries
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe #v4.1.0
      with:
        go-version: '~1.20'


    - name: Check out base repo
      if: github.event.action != 'labeled'
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1

    # If a PR was reviewed and deemed safe to run in the context of our repo and it's secrets, we label it to trigger E2E tests.
    # In that case this Action is triggered in pull_request_target context and checks out the HEAD of the PR branch.
    # This is a semi-secure manually reviewed way to ensure we only run code we're fine accessing our secrets
    - name: Check out PR # nosemgrep:yaml.github-actions.security.pull-request-target-code-checkout.pull-request-target-code-checkout
      if: github.event.action == 'labeled' && github.event.label.name == env.E2E_TEST_LABEL
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: üèÅ Build release binaries
      if: (github.event.action != 'labeled' || github.event.label.name == env.E2E_TEST_LABEL)
      run: make build-release

  integration-test:
    name: Integration tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    steps:
    - name: Integration test
      if: (github.event.action != 'labeled' || github.event.label.name == env.E2E_TEST_LABEL)
      uses: ./.github/actions/run-e2e-command
      with:
        go-version: '~1.20'
        command: make integration-test testopts="--junitfile test-result-integration.xml"
        name: Integration test

    - name: Legacy Integration test
      if: (github.event.action != 'labeled' || github.event.label.name == env.E2E_TEST_LABEL)
      uses: ./.github/actions/run-e2e-command
      with:
        go-version: '~1.20'
        command: make integration-test testopts="--junitfile test-result-integration-legacy.xml"
        name: Legacy Integration test

    - name: Download-restore-test
      if: (github.event.action != 'labeled' || github.event.label.name == env.E2E_TEST_LABEL)
      uses: ./.github/actions/run-e2e-command
      with:
        go-version: '~1.20'
        command: make download-restore-test testopts="--junitfile test-result-integration-download-restore.xml"
        name: Legacy Integration test

    - name: Nightly
      if: github.event_name == 'schedule'
      uses: ./.github/actions/run-e2e-command
      with:
        go-version: '~1.20'
        command: make nightly-test testopts="--junitfile test-result-integration-nightly.xml"
        name: Nightly

  upload_event:
    name: "Upload Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 #v3.1.3
      with:
        name: event_file
        path: ${{ github.event_path }}
